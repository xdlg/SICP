(define (f-rec n)
    (if (< n 3)
        n
        (+ (f-rec (- n 1)) (* 2 (f-rec (- n 2))) (* 3 (f-rec (- n 3))))
    )
)

(define (f-iter n)
    (f-iter-priv 2 1 0 n)
)

(define (f-iter-priv a b c count)
    (cond ((= count 0) c)
          ((= count 1) b)
          ((= count 2) a)
          (else (f-iter-priv (+ a (* 2 b) (* 3 c)) a b (- count 1)))
    )
)
