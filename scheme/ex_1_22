(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) 
         n)
        ((divides? test-divisor n) 
         test-divisor)
        (else (find-divisor 
               n 
               (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (timed-prime-test n)
    (define (display-n n)
        (display n)
        (newline)
        (time (prime? n))
    )

    (if (prime? n)
        (display-n n)
    )
)

(define (consecutive-odd-integers min max f)
    (define (iterate i max f)
        (f i)
        (loop (+ i 2) max f)
    )

    (define (loop i max f)
        (if (<= i max)
            (iterate i max f)
        )
    )

    (define (start-i i)
        (if (odd? i) i (+ i 1))
    )

    (loop (start-i min) max f)
)

(define (test-consecutive-primes min max)
    (consecutive-odd-integers min max timed-prime-test)
)
